#include<cstdio>
#include<iostream>
#include<cmath>
#include<cstdlib>
#include<cctype>
#include<algorithm>
#include<limits>
#include<vector>
#include<stack>
#include<string>
#include<deque>
#include<set>
#include<list>
#include<bitset>
#include<ctime>
#include<functional>
#include<numeric>
#include<cfloat>
#include<sstream>
#include<complex>
#include<queue>
#include<cstring>
#include<stdexcept>
#include<utility>
#include<map>
#include<fstream>
#include<iomanip>
#include<cassert>
#define area(x1,y1,x2,y2,x3,y3) ( x1*(y2-y3) + x2*(y3-y1) + x3*(y1-y2) )
#define distSqr(x1,y1,x2,y2) ( sqr(x1-x2) + sqr(y1-y2) )
#define MAX(a,b) (a<b?b:a)
#define MIN(a,b) (a<b?a:b)
#define inf (1<<30)-1
#define SIZE 100000001
#define pi 3.14159265358979323846
#define even(a) ((a)%2==0)
#define odd(a) ((a)%2==1)
const double E = 2.7182818284590452353602874713527;
using namespace std;
#define eps 1e-14
int xara[]={0,0,1,-1};
int yara[]={1,-1,0,0};
int rb[1010][1010],visit[1010][1010],cst[1010][1010],k,r,c,dsr,dsc,y,res;
struct ss{
	int x,y;
};
ss u,v;
queue<ss>q;
void clr()
{
	int i,j;
	for(i=0;i<=r;i++)
	{
		for(j=0;j<=c;j++)
		{
			visit[i][j]=0;
			cst[i][j]=0;
			rb[i][j]=0;
		}
	}
}
void bfs()
{
	while(!q.empty())
	{
		u=q.front();
		for(k=0;k<4;k++)
		{
			v.x=u.x+xara[k];
			v.y=u.y+yara[k];
			if(v.x>=0&&v.x<r&&v.y>=0&&v.y<c&&visit[v.x][v.y]==0&&rb[v.x][v.y]==0)
			{
				q.push(v);
				visit[v.x][v.y]=1;
				cst[v.x][v.y]+=cst[u.x][u.y]+1;
				if(v.x==dsr&&v.y==dsc)
				{
					res=cst[v.x][v.y];
					y=1;
					break;
				}
			}
		}
		q.pop();
	}
}
int main()
{
	int i,j,ro,cl,num,n,sc,sr;
	while(scanf("%d%d",&r,&c)&&(r!=0||c!=0))
	{
		clr();
		y=res=0;
		scanf("%d",&num);
		for(i=0;i<num;i++)
		{
			scanf("%d%d",&ro,&n);
			for(j=0;j<n;j++)
			{
				scanf("%d",&cl);
				rb[ro][cl]=1;
			}
		}
		scanf("%d%d",&sr,&sc);
		scanf("%d%d",&dsr,&dsc);
		u.x=sr;
		u.y=sc;
		q.push(u);
		bfs();
		if(y)
		{
			printf("%d\n",res);
		}
	}
	return 0;
}
