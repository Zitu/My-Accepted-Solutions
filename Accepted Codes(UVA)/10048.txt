#include<cstdio>
#include<iostream>
#include<cmath>
#include<cstdlib>
#include<cctype>
#include<algorithm>
#include<limits>
#include<vector>
#include<stack>
#include<string>
#include<deque>
#include<set>
#include<list>
#include<bitset>
#include<ctime>
#include<functional>
#include<numeric>
#include<cfloat>
#include<sstream>
#include<complex>
#include<queue>
#include<cstring>
#include<stdexcept>
#include<utility>
#include<map>
#include<fstream>
#include<iomanip>
#include<cassert>
#define MAX(a,b) (a<b?b:a)
#define MIN(a,b) (a<b?a:b)
#define inf (1<<30)-1
#define SIZE 100000001
#define pi 3.14159265358979323846
#define even(a) ((a)%2==0)
#define odd(a) ((a)%2==1)
const double E = 2.7182818284590452353602874713527;
using namespace std;
#define eps 1e-14
long rank[210],par[210],ar[2100],l,nd[210];
struct ss{
	long in,fn,cst;
}ara[10100];
bool cmp(ss aa,ss bb)
{
	return aa.cst<bb.cst;
}
void makepair(long n)
{
	long i;
	for(i=0;i<n;i++)
	{
		par[nd[i]]=nd[i];
	}
}
long findpar(long r)
{
	if(par[r]==r) return r;
	else
		return par[r]=findpar(par[r]);
}
void clr(long n)
{
	long i;
	for(i=0;i<=n;i++)
	{
		par[i]=rank[i]=0;
	}
}
int main()
{
	long i,j,k,c,s,q,test=0,mx,y,a,b,u,v;
	while(scanf("%ld%ld%ld",&c,&s,&q)&&(c!=0||s!=0||q!=0))
	{
		l=0;
		for(i=0;i<s;i++)
		{
			scanf("%ld%ld%ld",&ara[i].in,&ara[i].fn,&ara[i].cst);
			if(ar[ara[i].in]==0)
			{
				nd[l]=ara[i].in;
				ar[ara[i].in]=1;
				l++;
			}
			if(ar[ara[i].fn]==0)
			{
				nd[l]=ara[i].fn;
				ar[ara[i].fn]=1;
				l++;
			}
		}
		sort(ara,ara+s,cmp);
			if(test>0)
		{
			printf("\n");
		}
			test++;
		printf("Case #%ld\n",test);
		for(i=0;i<q;i++)
		{
			mx=y=0;
			clr(c);
			makepair(l);
			scanf("%ld%ld",&a,&b);
			if(ar[a]==0||ar[b]==0)
			{
				y=1;
				printf("no path\n");
			}
			else
			{
			for(j=0;j<s;j++)
			{
				u=findpar(ara[j].in);
				v=findpar(ara[j].fn);
				if(u!=v)
				{
					if(ara[j].cst>=mx)
					{
						mx=ara[j].cst;
					}
					if(rank[u]==0&&rank[v]==0)
					{
						par[v]=u;
						rank[u]+=2;
					}
					else if(rank[u]==rank[v])
					{
						par[v]=u;
						rank[u]+=rank[v];
					}
					else if(rank[u]>rank[v])
					{
						par[v]=u;
						if(rank[v]==0) rank[u]++;
						else
							rank[u]+=rank[v];
					}
					else if(rank[v]>rank[u])
					{
						par[u]=v;
						if(rank[u]==0) rank[v]++;
						else
							rank[v]+=rank[u];
					}
				}
				u=findpar(a);
				v=findpar(b);
				if(u==v)
				{
					y=1;
					printf("%ld\n",mx);
					break;
				}
			}
			if(y==0)
				printf("no path\n");
			}
		}
		memset(ar,0,sizeof(ar));
		memset(nd,0,sizeof(nd));

	}
	return 0;
}
