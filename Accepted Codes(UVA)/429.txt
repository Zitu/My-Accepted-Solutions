#include<cstdio>
#include<iostream>
#include<cmath>
#include<cstdlib>
#include<cctype>
#include<algorithm>
#include<limits>
#include<vector>
#include<stack>
#include<string>
#include<deque>
#include<list>
#include<bitset>
#include<ctime>
#include<functional>
#include<numeric>
#include<cfloat>
#include<sstream>
#include<complex>
#include<queue>
#include<cstring>
#include<stdexcept>
#include<utility>
#include<map>
#include<iomanip>
#include<cassert>
#define MAX(a,b) (a<b?b:a)
#define MIN(a,b) (a<b?a:b)
#define inf (1<<30)-1
#define SIZE 100000001
#define pi 3.14159265358979323846
#define even(a) ((a)%2==0)
#define odd(a) ((a)%2==1)
const double E = 2.7182818284590452353602874713527;
using namespace std;
const double eps = 1e-9;
char st[20],st1[20],ch[210][20],str[30];
map<string,long>mp,mp1;
map<long,string>mp2;
queue<long>qu;
long visit[300],dist[300];
void bfs(long node,long len)
{
	long v,j,l,dif;
	qu.push(node);
	visit[node]=1;
	while(!qu.empty())
	{
		v=qu.front();
		for(j=0;j<=len;j++)
		{
			dif=l=0;
			if(visit[j]==0)
			{
		    	while(ch[v][l]!=NULL&&ch[j][l]!=NULL)
				{
				 if(ch[v][l]!=ch[j][l])
				 {
					dif++;
				 }
				  l++;
				}
				if(dif==1)
				{
					visit[j]=1;
					qu.push(j);
					dist[j]=dist[v]+1;
				}
			}
		}
		qu.pop();
	}
}
int main()
{
	long test,i,k,j;
	scanf("%ld",&test);
	for(i=0;i<test;i++)
	{
		if(i>0)
			printf("\n");
		k=0;
		while(scanf("%s",ch[k])&&strcmp(ch[k],"*")!=0)
		{
			mp1[ch[k]]=k;
			mp2[k]=ch[k];
			mp[ch[k]]=strlen(ch[k]);
			k++;
		}
		getchar();
		while(gets(str)&&strlen(str)!=0)
		{

			sscanf(str,"%s%s",st,st1);
			bfs(mp1[st],k-1);
			cout<<st<<" "<<st1<<" "<<dist[mp1[st1]]<<endl;
		    for(j=0;j<=k;j++)
			dist[j]=visit[j]=0;
		}
		mp.clear(),mp1.clear(),mp2.clear();
		
	}
	return 0;
}
