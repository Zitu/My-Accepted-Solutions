#include<cstdio>
#include<iostream>
#include<cmath>
#include<cstdlib>
#include<cctype>
#include<algorithm>
#include<vector>
#include<stack>
#include<string>
#include<deque>
#include<list>
#include<queue>
#include<cstring>
#include<map>
#define MAX(a,b) (a<b?b:a)
#define MIN(a,b) (a<b?a:b)
using namespace std;
vector<long>vc[10000];
queue<long>q;
long cost[100000],visit[100000],ara[10000],ara1[10000],k;
long p;
void bfs(long node)
{
	long i,u,v,count=0,l=0,k=1,max=0;
     ara[0]=1;
	q.push(node);
	while(!q.empty())
	{
		v=q.front();
		visit[v]=1;
		for(i=0;i<vc[v].size();i++)
		{
			u=vc[v][i];
			if(!visit[u])
			{
				q.push(u);
				cost[u]=cost[v]+1;
				visit[u]=1;
				count++;
			}	
		}
		l++;
		if(l==ara[k-1])
		{
			ara[k]=count;
			if(count>max)
			{
				max=count;
				p=k;
			}
			k++;
			l=0;
			count=0;
		}
		q.pop();
	}
}
int main()
{
	long i,j,n,num,node,source,r,nu;
	while(scanf("%ld",&nu)!=EOF)
	{
		for(i=0;i<nu;i++)
		{
			scanf("%ld",&n);
			ara1[i]=n;
			for(j=0;j<n;j++)
			{
				scanf("%ld",&node);
				vc[i].push_back(node);
			}
		}
		scanf("%ld",&num);
		for(i=0;i<num;i++)
		{
			scanf("%ld",&source);
		    bfs(source);
			if(ara1[source]==0)
				printf("0\n");
			else
		        printf("%ld %ld\n",ara[p],p);
			   for(j=1;j<=nu;j++)
				ara[j]=visit[j-1]=0;
			p=0;
		}
		for(i=0;i<=nu;i++)
			vc[i].clear();
	}
	return 0;
}
