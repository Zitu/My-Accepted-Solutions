#include<cstdio>
#include<iostream>
#include<cmath>
#include<cstdlib>
#include<cctype>
#include<algorithm>
#include<limits>
#include<vector>
#include<stack>
#include<string>
#include<deque>
#include<set>
#include<list>
#include<bitset>
#include<ctime>
#include<functional>
#include<numeric>
#include<cfloat>
#include<sstream>
#include<complex>
#include<queue>
#include<cstring>
#include<stdexcept>
#include<utility>
#include<map>
#include<fstream>
#include<iomanip>
#include<cassert>
#define MAX(a,b) (a<b?b:a)
#define MIN(a,b) (a<b?a:b)
#define inf (1<<30)-1
#define SIZE 100000001
#define pi 3.14159265358979323846
#define even(a) ((a)%2==0)
#define odd(a) ((a)%2==1)
const double E = 2.7182818284590452353602874713527;
using namespace std;
#define eps 1e-14
long par[10010],rank[10010],ar[10010];
struct ss{
	long in,fn,cst;
}ara[100010];
bool cmp(ss aa,ss bb)
{
	return aa.cst<bb.cst;
}
void makepair(long n)
{
	par[n]=n;
}
long findpar(long r)
{
	if(par[r]==r) return r;
	else
		return par[r]=findpar(par[r]);
}
int main()
{
	long test,i,j,a,n,m,cs,b,l,cost,cnt,y,x,u,v,num;
	scanf("%ld",&test);
	for(i=0;i<test;i++)
	{
		l=cost=cnt=num=0;
		scanf("%ld%ld%ld",&n,&m,&a);
		for(j=0;j<m;j++)
		{
			scanf("%ld%ld%ld",&x,&y,&cs);
			if(cs<a)
			{
				ara[l].in=x;
				ara[l].fn=y;
				ara[l].cst=cs;
				if(ar[ara[l].in]==0)
				{
					makepair(ara[l].in);
					ar[ara[l].in]=1;
				}
				if(ar[ara[l].fn]==0)
				{
					makepair(ara[l].fn);
					ar[ara[l].fn]=1;
				}
				l++;
			}
		}
		sort(ara,ara+l,cmp);
		for(j=0;j<l;j++)
		{
			u=findpar(ara[j].in);
			v=findpar(ara[j].fn);
			if(u!=v)
			{
				cost+=ara[j].cst;
				if(rank[u]==0&&rank[v]==0)
				{
					par[v]=u;
					cnt++;
					rank[u]+=2;
					num+=2;
				}
				else if(rank[u]==rank[v])
				{
					par[v]=u;
					cnt--;
					rank[u]+=rank[v];
				}
				else if(rank[u]>rank[v])
				{
					par[v]=u;
					if(rank[v]==0)
					{
						rank[u]++;
						num++;
					}
					else
					{
					cnt--;
					rank[u]+=rank[v];
					}
				}
				else if(rank[v]>rank[u])
				{
					par[u]=v;
					if(rank[u]==0)
					{
						rank[v]++;
						num++;
					}
					else
					{
					cnt--;
					rank[v]+=rank[u];
					}
				}
			}
		}
		cnt+=(n-num);
		cost+=(a*cnt);
		printf("Case #%ld: %ld %ld\n",i+1,cost,cnt);
		for(j=0;j<=n;j++)
		{
			par[j]=ar[j]=rank[j]=0;
		}
	}
	return 0;
}
