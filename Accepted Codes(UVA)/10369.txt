#include<cstdio>
#include<iostream>
#include<cmath>
#include<cstdlib>
#include<cctype>
#include<algorithm>
#include<limits>
#include<vector>
#include<stack>
#include<string>
#include<deque>
#include<set>
#include<list>
#include<bitset>
#include<ctime>
#include<functional>
#include<numeric>
#include<cfloat>
#include<sstream>
#include<complex>
#include<queue>
#include<cstring>
#include<stdexcept>
#include<utility>
#include<map>
#include<fstream>
#include<iomanip>
#include<cassert>
#define MAX(a,b) (a<b?b:a)
#define MIN(a,b) (a<b?a:b)
#define inf (1<<30)-1
#define SIZE 100000001
#define pi 3.14159265358979323846
#define even(a) ((a)%2==0)
#define odd(a) ((a)%2==1)
const double E = 2.7182818284590452353602874713527;
using namespace std;
#define eps 1e-14
int par[510],rank[510],xa[510],ya[510];
int p,j,s,u,v;
struct ss{
	int in,fn;
	double cst;
}ara[250010];
bool cmp(ss aa,ss bb)
{
	return aa.cst<bb.cst;
}
void makepair(int n)
{
	int i;
	for(i=0;i<p;i++)
	{
		par[i]=i;
		rank[i]=0;
	}
}
int findpar(int r)
{
	if(par[r]==r) return r;
	else
		return par[r]=findpar(par[r]);
}
void link()
{
	if(rank[u]==0&&rank[v]==0)
	{
		par[v]=u;
		rank[u]==2;
	}
	else if(rank[u]==rank[v])
	{
		par[v]=u;
		rank[u]+=rank[v];
	}
	else if(rank[u]>rank[v])
	{
		par[v]=u;
		if(rank[v]==0) rank[u]++;
		else
		rank[u]+=rank[v];
	}
	else if(rank[v]>rank[u])
	{
		par[u]=v;
		if(rank[u]==0) rank[v]++;
		else
			rank[v]+=rank[u];


	}
}
int main()
{
	int i,test,k,j,l,cnt;
	scanf("%d",&test);
	for(i=0;i<test;i++)
	{
		l=cnt=0;
		scanf("%d%d",&s,&p);
		makepair(p);
		for(j=0;j<p;j++)
		{
			scanf("%d%d",&xa[j],&ya[j]);
			for(k=0;k<j;k++)
			{
				ara[l].in=j;
				ara[l].fn=k;
				ara[l].cst=((xa[j]-xa[k])*(xa[j]-xa[k]))+((ya[j]-ya[k])*(ya[j]-ya[k]));
				l++;
			}
		}
		sort(ara,ara+l,cmp);
		for(j=0;j<l;j++)
		{
			u=findpar(ara[j].in);
			v=findpar(ara[j].fn);
			if(u!=v)
			{
				link();
				cnt++;
				if(p-cnt==s)
				{
				printf("%.2lf\n",sqrt(ara[j].cst)+.000000000001);
				break;
				}
			}
		}
	}
	return 0;
}
