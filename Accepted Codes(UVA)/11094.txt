#include<cstdio>
#include<iostream>
#include<cmath>
#include<cstdlib>
#include<cctype>
#include<algorithm>
#include<limits>
#include<vector>
#include<stack>
#include<string>
#include<deque>
#include<list>
#include<bitset>
#include<ctime>
#include<sstream>
#include<queue>
#include<cstring>
#include<map>
#include<iomanip>
#include<cassert>
#define MAX(a,b) (a<b?b:a)
#define MIN(a,b) (a<b?a:b)
#define inf (1<<30)-1
#define SIZE 100000001
#define pi (2*acos(0.0))
#define err 1e-9
#define even(a) ((a)%2==0)
#define odd(a) ((a)%2==1)
const double E = 2.7182818284590452353602874713527;
using namespace std;
long M,N,cnt,no,flag,num=1000,e,l,k,ara[1000],ara1[1000],na;
char inp[100][100],c,r;
long xmyarr[]={ 0,1,0,-1};
long ymyarr[]={-1,0,1,0};
long GCD(long a,long b)
{
	while(b) b ^= a ^= b ^= a %= b;
	return a;
}
void fill(long x,long y)
{
	long p;
  if(x<0 ||x>=M || y<0 || y>=N || inp[x][y]!=c) return;
     cnt++;
	 if(y==0)
	 {
		 ara[k]=x;
		 no=1;
		 k++;
	 }
	 if(y==N-1)
	 {
		 na=1;
		 ara1[l]=x;
		 l++;
	 }
    inp[x][y]=r;
    for(p=0;p<4;p++)
    fill(x+xmyarr[p],y+ymyarr[p]);
}
int main()
{
	long i,a,b,p,q,max,res,l,len,j;
	while(scanf("%ld%ld",&M,&N)!=EOF)
	{
		cnt=max=e=l=k=0,na=no=1000;
		getchar();
		for(i=0;i<M;i++)
		{
			gets(inp[i]);
		}
		scanf("%ld%ld",&a,&b);
		c=inp[a][b];
		r='*';
		fill(a,b);
		if(no==1)
		{
			for(i=0;i<k;i++)
			{
				fill(ara[i],N-1);
			}
		}
		if(na==1)
		{
			for(i=0;i<l;i++)
			{
				fill(ara1[i],0);
			}
		}
		res=cnt;
		for(p=0;p<M;p++)
		{
			for(q=0;q<N;q++)
			{
				cnt=flag=e=l=k=0,no=na=1000;
				if(inp[p][q]==c)
					fill(p,q);
				if(no==1)
				{ 
			for(i=0;i<k;i++)
			{
				fill(ara[i],N-1);
			}
				}
		      if(na==1)
			  {
			for(i=0;i<l;i++)
			{
				fill(ara1[i],0);
			}
			  }
				if(cnt>=max)
				{
					max=cnt;
				}
			}
		}
		printf("%ld\n",max);
		for(p=0;p<M;p++)
		{
			for(q=0;q<N;q++)
			{
				inp[p][q]=NULL;
			}
		}

	}
	return 0;
}
/*
4 4
lool
olol
oool
llll
1 1
*/



