#include<cstdio>
#include<iostream>
#include<cmath>
#include<cstdlib>
#include<cctype>
#include<algorithm>
#include<vector>
#include<stack>
#include<string>
#include<deque>
#include<list>
#include<bitset>
#include<ctime>
#include<sstream>
#include<queue>
#include<cstring>
#include<map>
#include<iomanip>
#include<cassert>
#define MAX(a,b) (a<b?b:a)
#define MIN(a,b) (a<b?a:b)
#define inf (1<<30)-1
#define SIZE 10000001
#define pi 3.14159265359879323846
#define err 1e-9
#define even(a) ((a)%2==0)
#define odd(a) ((a)%2==1)
const double E = 2.7182818284590452353602874713527;
#define WHITE 0
#define GRAY  1
#define BLACK 2
#define NIL 0
using namespace std;
vector<long>vc[10100];
long color[SIZE],cost[SIZE],Y,T;
long GCD(long a,long b)
{
	while(b) b ^= a ^= b ^= a %= b;
	return a;
}
void DFS(long node)
{
	long i,v;
	color[node]=GRAY;
	for(i=0;i<vc[node].size();i++)
	{
		v=vc[node][i];
		if(color[v]==WHITE)
		{
			color[v]=GRAY;
			Y=1;
			cost[node]=T++;
			DFS(v);
		}
	}
}
int main()
{
	long test,n,m,l,i,x,y,j,source,sum;
	scanf("%ld",&test);
	for(i=0;i<test;i++)
	{
		sum=0;
		scanf("%ld%ld%ld",&n,&m,&l);
		for(j=0;j<m;j++)
		{
			scanf("%ld%ld",&x,&y);
			vc[x].push_back(y);
		}
		for(j=0;j<l;j++)
		{
		scanf("%ld",&source);
		T=1;
		if(color[source]==0)
		{
		  DFS(source);
		  sum+=T;
		}
		}
		printf("%ld\n",sum);
		for(j=0;j<=n;j++)
		{
			vc[j].clear();
			cost[j]=color[j]=0;
		}
	}
	return 0;
}
