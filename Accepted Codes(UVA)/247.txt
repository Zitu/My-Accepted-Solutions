#include<cstdio>
#include<iostream>
#include<cmath>
#include<cstdlib>
#include<cctype>
#include<algorithm>
#include<limits>
#include<vector>
#include<stack>
#include<string>
#include<deque>
#include<list>
#include<bitset>
#include<ctime>
#include<functional>
#include<numeric>
#include<cfloat>
#include<sstream>
#include<complex>
#include<queue>
#include<cstring>
#include<stdexcept>
#include<utility>
#include<map>
#include<fstream>
#include<iomanip>
#include<cassert>
#define MAX(a,b) (a<b?b:a)
#define MIN(a,b) (a<b?a:b)
#define inf (1<<30)-1
#define SIZE 100000001
#define pi 3.14159265358979323846
#define even(a) ((a)%2==0)
#define odd(a) ((a)%2==1)
const double E = 2.7182818284590452353602874713527;
using namespace std;
const double eps = 1e-9;
char ch[100],ch1[100];
vector<long>vc[100],ivc[100];
map<string,long>mp;
map<long,string>mp1;
long ara[50],ara1[50],k,l;
bool color[50];
void dfs1(long node,long G,long W)
{
	long i,u;
	l++;
	if(l==1)
		cout<<mp1[node];
	else
		cout<<", "<<mp1[node];
	color[node]=G;
	for(i=0;i<ivc[node].size();i++)
	{
		u=ivc[node][i];
		if(color[u]==W)
		{
			dfs1(u,0,1);
		}
	}
}
void dfs(long node,long G,long W)
{
	long i,u;
	color[node]=G;
	for(i=0;i<vc[node].size();i++)
	{
		u=vc[node][i];
		if(color[u]==W)
		{
			dfs(u,1,0);
		}
	}
	ara[k]=node;
	k++;
}
int main()
{
	long n,m,i,p,cse=0;
	while(scanf("%ld%ld",&n,&m)&&(n!=0||m!=0))
	{
		if(cse>0)
			printf("\n");
		cse++;
		k=0;
		p=1;
		for(i=0;i<m;i++)
		{
		  scanf("%s%s",ch,ch1);
		  if(mp[ch]==0)
		  {
			mp[ch]=p;
			mp1[p]=ch;
			p++;
		  }
		  if(mp[ch1]==0)
		  {
			mp[ch1]=p;
			mp1[p]=ch1;
   			p++;
		  }
		  vc[mp[ch]].push_back(mp[ch1]);
		  ivc[mp[ch1]].push_back(mp[ch]);
		}
		for(i=1;i<=n;i++)
		{
			if(color[i]==0)
			{
				dfs(i,1,0);
			}
		}
		printf("Calling circles for data set %ld:\n",cse);
		for(i=k-1;i>=0;i--)
		{
			if(color[ara[i]]==1)
			{
				l=0;
				dfs1(ara[i],0,1);
				printf("\n");
			}
		}
		for(i=0;i<=n;i++)
		{
			vc[i].clear();
			ivc[i].clear();
			ara[i]=ara1[i]=color[i]=0;
		}
		mp.clear(),mp1.clear();
	}
	return 0;
}
