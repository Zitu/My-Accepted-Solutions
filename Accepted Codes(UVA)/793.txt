#include<cstdio>
#include<iostream>
#include<cmath>
#include<cstdlib>
#include<cctype>
#include<algorithm>
#include<limits>
#include<vector>
#include<stack>
#include<string>
#include<deque>
#include<set>
#include<list>
#include<bitset>
#include<ctime>
#include<functional>
#include<numeric>
#include<cfloat>
#include<sstream>
#include<complex>
#include<queue>
#include<cstring>
#include<stdexcept>
#include<utility>
#include<map>
#include<fstream>
#include<iomanip>
#include<cassert>
#define MAX(a,b) (a<b?b:a)
#define MIN(a,b) (a<b?a:b)
#define inf (1<<30)-1
#define SIZE 100000001
#define pi 3.14159265358979323846
#define even(a) ((a)%2==0)
#define odd(a) ((a)%2==1)
const double E = 2.7182818284590452353602874713527;
using namespace std;
const double eps = 1e-9;
long ara[1000000],ara1[1000000],par[1000000],res[1000000];
char ch[1000];
void makeset(long n)
{
	par[n]=n;
}
long findpar(long r)
{
	if(par[r]==r) return r;
	else
		return par[r]=findpar(par[r]);

}
int main()
{
	long num,k,u,v,a,b,n,i,j,y,no;
	char c;
	scanf("%ld",&num);
	for(i=0;i<num;i++)
	{
		if(i>0)
			printf("\n");
		k=y=no=0;
		scanf("%ld",&n);
		getchar();
		while(gets(ch) && sscanf(ch,"%c%ld%ld",&c,&u,&v)==3)
		{
			if(ara[u]==0)
			{
				makeset(u);
				ara[u]=1;
				k++;
			}
			if(ara[v]==0)
			{
				makeset(v);
				ara[v]=1;
				k++;
			}
			a=findpar(u);
			b=findpar(v);
			if(a!=b&&c!='q')
			{
				if(res[a]==0&&res[b]==0)
				{
					par[b]=a;
					res[a]+=2;
				}
				else if(res[a]!=0&&res[b]==0)
				{
					par[b]=a;
				    res[a]++;
				}
				else if(res[a]==0&&res[b]!=0)
				{
					res[b]++;
					par[a]=b;
				}
				else if(res[a]!=0&&res[b]!=0)
				{
					par[b]=a;
					res[a]+=res[b];
				}
			}
			if(c=='q')
			{
				if(a==b)
				{
					y++;
				}
				else
				{
					no++;
				}
			}
		}
		printf("%ld,%ld\n",y,no);
		for(j=0;j<=n;j++)
		{
			res[j]=par[j]=ara[j]=0;
		}
	}
	return 0;
}