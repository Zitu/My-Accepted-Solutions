#include<cstdio>
#include<iostream>
#include<cmath>
#include<cstdlib>
#include<cctype>
#include<algorithm>
#include<limits>
#include<vector>
#include<stack>
#include<string>
#include<deque>
#include<list>
#include<bitset>
#include<ctime>
#include<sstream>
#include<queue>
#include<cstring>
#include<map>
#include<iomanip>
#include<cassert>
#define MAX(a,b) (a<b?b:a)
#define MIN(a,b) (a<b?a:b)
#define inf (1<<30)-1
#define SIZE 100000001
#define pi 3.14159265358979323846
#define err 1e-9
#define even(a) ((a)%2==0)
#define odd(a) ((a)%2==1)
const double E = 2.7182818284590452353602874713527;
using namespace std;
long prime[10000],ara[10100],ara1[10000],k=1;
char a[1000];
long sieve()
{
	long i,j;
	prime[0]=2;
	for(i=3;i<=10000;i+=2)
	{
		if(ara[i]==0)
		{
			prime[k]=i;
			k++;
		}
		if(i<=1000)
		{
			for(j=i*i;j<=10000;j+=(2*i))
			{
				ara[j]=1;
			}
		}
	}
	return k;
}
int main()
{
	sieve();
	long sum,i,j,len,num,na,l,m;
	while(scanf("%ld",&num)!=EOF)
	{
		for(i=0;i<k;i++)
		{
			na=prime[i];
			if((num/prime[i])!=0)
			{
				l=1;
				while((num/na)!=0)
				{
					ara1[prime[i]]+=(num/na);
					l++;
				    na=pow(prime[i],l);
				}
			}
			else
				break;
		}
		ara1[2]-=ara1[5];
		ara1[5]=0;
		sum=1;
		for(j=0;j<i;j++)
		{
			for(m=0;m<ara1[prime[j]];m++)
			{
				sum*=prime[j];
				sprintf(a,"%ld",sum);
				sum=a[strlen(a)-1]-48;
			}
			ara1[prime[j]]=0;
		}
		printf("%5ld -> %ld\n",num,sum);
	}
	return 0;
}
