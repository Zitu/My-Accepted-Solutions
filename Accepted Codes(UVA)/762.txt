#include<cstdio>
#include<iostream>
#include<cmath>
#include<cstdlib>
#include<cctype>
#include<algorithm>
#include<vector>
#include<stack>
#include<string>
#include<deque>
#include<list>
#include<queue>
#include<cstring>
#include<map>
#define MAX(a,b) (a<b?b:a)
#define MIN(a,b) (a<b?a:b)
using namespace std;
vector<long>vc[1000];
queue<long>q;
char ch[1000],ch1[1000],st[1000][100],str[100];
long visit[1000],cost[1000],p[1000];
map<string,long>mp;
map<long,string>mp1,mp3,mp2;
void bfs(long node)
{
	long i,u,v;
	q.push(node);
	while(!q.empty())
	{
		v=q.front();
		visit[v]=1;
		for(i=0;i<vc[v].size();i++)
		{
			u=vc[v][i];
			if(!visit[u])
			{
				q.push(u);
				cost[u]=cost[v]+1;
				visit[u]=1;
				p[u]=v;
			}
		}
		q.pop();
	}
}
int main()
{
	long i,j,k,l,num,dest,test=0;
	while(scanf("%ld",&num)!=EOF)
	{
	    	if(test>0)
			printf("\n");
		    k=1;
		for(i=0;i<num;i++)
		{
			scanf("%s%s",ch,ch1);
			if(mp[ch]==0)
			{
				mp[ch]=k;
				mp1[k]=ch;
				k++;
			}
			if(mp[ch1]==0)
			{
				mp[ch1]=k;
				mp1[k]=ch1;
				k++;
			}
			vc[mp[ch]].push_back(mp[ch1]);
			vc[mp[ch1]].push_back(mp[ch]);
		}
		scanf("%s%s",ch,ch1);
		cost[mp[ch]]=0;
		bfs(mp[ch]);
		if(cost[mp[ch1]]==0)
			printf("No route\n");
		else
		{
			l=1;
			mp2[0]=ch1;
			mp3[0]=ch1;
			while(1)
			{
				mp2[0]=mp1[p[mp[mp2[0]]]];
				mp3[l]=mp2[0];
				if(mp2[0]==ch)
				{
					break;
				}
				l++;
			}
			for(j=l;j>=1;j--)
			{
				cout<<mp3[j]<<" "<<mp3[j-1]<<endl;
			}
		}
			for(j=0;j<=k;j++)
			{
				visit[j]=cost[j]=p[j]=0;
			}
			mp.clear(),mp1.clear(),mp2.clear(),mp3.clear();
		for(j=0;j<=k;j++)
		{
			vc[j].clear();
		}
		test++;
	}
	return 0;
}
