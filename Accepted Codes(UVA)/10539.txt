#include<cstdio>
#include<iostream>
#include<cmath>
#include<cstdlib>
#include<cctype>
#include<algorithm>
#include<limits>
#include<vector>
#include<stack>
#include<string>
#include<deque>
#include<list>
#include<bitset>
#include<ctime>
#include<sstream>
#include<queue>
#include<cstring>
#include<map>
#include<iomanip>
#include<cassert>
#define MAX(a,b) (a<b?b:a)
#define MIN(a,b) (a<b?a:b)
#define inf (1<<30)-1
#define SIZE 100000001
#define pi 3.14159265358979323846
#define err 1e-9
#define even(a) ((a)%2==0)
#define odd(a) ((a)%2==1)
const double E = 2.7182818284590452353602874713527;
using namespace std;
long long prim=1000000,root=1000,num=1000000000000LL;
long long ara[10000000],prime[10000000];
long long cnt=0,alprime[10000000],Y;
long long sieve()
{
	long long i,j,count=1;
	prime[0]=2;
	for(i=3;i<=prim;i+=2)
	{
		if(ara[i]==0)
		{
			prime[count]=i;
			count++;
			if(i<=root)
			{
				for(j=i*i;j<=prim;j+=2*i)
				{
					ara[j]=1;
				}

			}
		}
	}
	return count;
}
long long alprim()
{
	long long c,i,k=1,j;
	c=sieve();
	for(i=0;i<c;i++)
	{
		k=1;
		k=k*prime[i]*prime[i];;
		for(j=prime[i];j<=num;cnt++)
		{
			alprime[cnt]=k;
			k=k*prime[i];
			j=k;
		}
	}
	sort(alprime,alprime+cnt);
	return cnt;
}
long long binsearch(long long num,long long c)
{
	long long low=0,high=c,mid,res;
	while(low<=high)
	{
		mid=(low+high)/2;
		if(num==alprime[mid])
		{
            Y=1;
			break;
		}
		if(num<alprime[mid])
		{
			high=mid-1;
			if(num>alprime[high])
			{
				mid=high;
				break;
			}
		}
		else
		{
			low=mid+1;
			if(num<alprime[low])
			{
                mid=low-1;       
				break;
			}

		}
	}
	return mid;
}

int main()
{
	long long c,l,h,num1,num2,test,i,res;
	c=alprim();
	scanf("%lld",&test);
	for(i=1;i<=test;i++)
	{
                        Y=0;
		scanf("%lld%lld",&l,&h);
	    num1=binsearch(l,c-1);
	    num2=binsearch(h,c-1);
	    
        if(l==h&&Y==1)
        printf("1\n");
        else
        {
	    if(Y==1)
	    {
                        res=(num2-num1)+1;
        }
       else
		res=(num2-num1);
		printf("%lld\n",res);
     }
	}
	return 0;
}
