#include<cstdio>
#include<iostream>
#include<cmath>
#include<cstdlib>
#include<cctype>
#include<algorithm>
#include<limits>
#include<vector>
#include<stack>
#include<string>
#include<deque>
#include<set>
#include<list>
#include<bitset>
#include<ctime>
#include<functional>
#include<numeric>
#include<cfloat>
#include<sstream>
#include<complex>
#include<queue>
#include<cstring>
#include<stdexcept>
#include<utility>
#include<map>
#include<fstream>
#include<iomanip>
#include<cassert>
#define MAX(a,b) (a<b?b:a)
#define MIN(a,b) (a<b?a:b)
#define inf (1<<30)-1
#define SIZE 100000001
#define pi 3.14159265358979323846
#define even(a) ((a)%2==0)
#define odd(a) ((a)%2==1)
const double E = 2.7182818284590452353602874713527;
using namespace std;
#define eps 1e-14
long xa[10000],ya[10000],rank[10000],par[10000];
struct ss{
	long in,fn,x,y;
	long cst;
}ara[562510];
bool cmp(ss aa,ss bb)
{
	return aa.cst<bb.cst;
}
void makepair(long n)
{
	par[n]=n;
}
long findpar(long r)
{
	if(par[r]==r) return r;
	else
		return par[r]=findpar(par[r]);
}
int main()
{
	long test,i,j,k,cnt,n,l,a,b,u,v,m,num;
	long dis;
	scanf("%ld",&test);
	for(i=0;i<test;i++)
	{
		if(i>0)
			printf("\n");
		l=0;
		num=cnt=0;
		scanf("%ld",&n);
		for(j=0;j<n;j++)
		{
			makepair(j+1);
			scanf("%ld%ld",&xa[j],&ya[j]);
			for(k=0;k<j;k++)
			{
				ara[l].in=j+1;
				ara[l].fn=k+1;
				dis=((xa[j]-xa[k])*(xa[j]-xa[k]))+((ya[j]-ya[k])*(ya[j]-ya[k]));
				ara[l].cst=dis;
				l++;
			}
		}
		sort(ara,ara+l,cmp);
		scanf("%ld",&m);
		for(j=0;j<m;j++)
		{
			scanf("%ld%ld",&a,&b);
			u=findpar(a);
			v=findpar(b);
			if(u!=v)
			{
				if(rank[u]==0&&rank[v]==0)
				{
					par[v]=u;
					rank[u]+=2;
					cnt+=2;
				}
				else if(rank[u]==rank[v])
				{
					par[v]=u;
					rank[u]+=rank[v];
				}
				else if(rank[u]>rank[v])
				{
					par[v]=u;
					if(rank[v]==0) 
					{
						rank[u]++;
						cnt++;
					}
					else
					{
						rank[u]+=rank[v];
					}
				}
				else if(rank[v]>rank[u])
				{
					par[u]=v;
					if(rank[u]==0)
					{
					 rank[v]++;
					 cnt++;
					}
					else
					{
						rank[v]+=rank[u];
					}
				}
			}
		}
		if(cnt==n||n==1)
		{
			printf("No new highways need\n");
		}
		else
		{
		   for(j=0;j<l;j++)
		   {
			   u=findpar(ara[j].in);
			   v=findpar(ara[j].fn);
			   if(u!=v)
			   {
				   ara[num].x=ara[j].in;
				   ara[num].y=ara[j].fn;
				   num++;
				   if(rank[u]==0&&rank[v]==0)
				{
					par[v]=u;
					rank[u]+=2;
					cnt+=2;
				}
				else if(rank[u]==rank[v])
				{
					par[v]=u;
					rank[u]+=rank[v];
				}
				else if(rank[u]>rank[v])
				{
					par[v]=u;
					if(rank[v]==0) 
					{
						rank[u]++;
						cnt++;
					}
					else
					{
						rank[u]+=rank[v];
					}
				}
				else if(rank[v]>rank[u])
				{
					par[u]=v;
					if(rank[u]==0)
					{
					 rank[v]++;
					 cnt++;
					}
					else
					{
						rank[v]+=rank[u];
					}
				}
			   }
		   }
		   for(k=0;k<num;k++)
				   {
					   printf("%ld %ld\n",ara[k].x,ara[k].y);
				   }
		}
		for(j=0;j<=n;j++)
		{
			par[j]=rank[j]=0;
		}
	}
	return 0;
}
