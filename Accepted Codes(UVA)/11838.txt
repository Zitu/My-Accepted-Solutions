#include<cstdio>
#include<iostream>
#include<cmath>
#include<cstdlib>
#include<cctype>
#include<algorithm>
#include<limits>
#include<vector>
#include<stack>
#include<string>
#include<deque>
#include<list>
#include<bitset>
#include<ctime>
#include<functional>
#include<numeric>
#include<cfloat>
#include<sstream>
#include<complex>
#include<queue>
#include<cstring>
#include<stdexcept>
#include<utility>
#include<map>
#include<fstream>
#include<iomanip>
#include<cassert>
#define MAX(a,b) (a<b?b:a)
#define MIN(a,b) (a<b?a:b)
#define inf (1<<30)-1
#define SIZE 100000001
#define pi 3.14159265358979323846
#define even(a) ((a)%2==0)
#define odd(a) ((a)%2==1)
const double E = 2.7182818284590452353602874713527;
using namespace std;
const double eps = 1e-9;
vector<long>vc[2010],ivc[2010];
long ara[2010],k;
bool color[2010];
void dfs1(long node,long G,long W)
{
	long i,u;
	color[node]=G;
	for(i=0;i<ivc[node].size();i++)
	{
		u=ivc[node][i];
		if(color[u]==W)
		{
			dfs1(u,0,1);
		}
	}
}

void dfs(long node,long G,long W)
{
	long i,u;
	color[node]=G;
	for(i=0;i<vc[node].size();i++)
	{
		u=vc[node][i];
		if(color[u]==W)
		{
			dfs(u,1,0);
		}
	}
	ara[k]=node;
	k++;
}
int main()
{
	long n,m,i,v,w,p,cnt;
	while(scanf("%ld%ld",&n,&m)&&(n!=0||m!=0))
	{
		cnt=0;
		for(i=0;i<m;i++)
		{
			scanf("%ld%ld%ld",&v,&w,&p);
			vc[v].push_back(w);
			ivc[w].push_back(v);
			if(p==2)
			{
				vc[w].push_back(v);
				ivc[v].push_back(w);
			}
		}
		for(i=1;i<=n;i++)
		{
			if(color[i]==0)
			{
				dfs(i,1,0);
			}
		}
		for(i=k-1;i>=0;i--)
		{
			if(color[ara[i]]==1)
			{
			cnt++;
			dfs1(ara[i],0,1);
			}
		}
		if(cnt==1)
		printf("1\n");
		else
			printf("0\n");
		for(i=0;i<=n;i++)
		{
			vc[i].clear();
			ivc[i].clear();
			ara[i]=color[i]=0;
		}
	}
	return 0;
}
