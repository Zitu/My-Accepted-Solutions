#include<cstdio>
#include<iostream>
#include<cmath>
#include<cstdlib>
#include<cctype>
#include<algorithm>
#include<limits>
#include<vector>
#include<stack>
#include<string>
#include<deque>
#include<set>
#include<list>
#include<bitset>
#include<ctime>
#include<functional>
#include<numeric>
#include<cfloat>
#include<sstream>
#include<complex>
#include<queue>
#include<cstring>
#include<stdexcept>
#include<utility>
#include<map>
#include<fstream>
#include<iomanip>
#include<cassert>
#define MAX(a,b) (a<b?b:a)
#define MIN(a,b) (a<b?a:b)
#define inf (1<<30)-1
#define SIZE 100000001
#define pi 3.14159265358979323846
#define even(a) ((a)%2==0)
#define odd(a) ((a)%2==1)
const double E = 2.7182818284590452353602874713527;
using namespace std;
#define eps 1e-14
long par[1000000],ara[100000],res[1000000],rnk[1000000],cst[100000],ar[100000];
void makepar(long n)
{
	par[n]=n;
	rnk[n]=0;
}
long findpar(long r)
{
	if(par[r]==r) return r;
	else
		return par[r]=findpar(par[r]);
}
int main()
{
	long test,u,v,m,n,i,j,a,b,y;
	scanf("%ld",&test);
	for(i=0;i<test;i++)
	{
		y=0;
		scanf("%ld%ld",&n,&m);
		for(j=0;j<n;j++)
		{
			scanf("%ld",&cst[j]);
		}
		for(j=0;j<m;j++)
		{
			scanf("%ld%ld",&a,&b);
			if(ara[a]==0)
			{
				makepar(a);
				ara[a]=1;
			}
			if(ara[b]==0)
			{
				makepar(b);
				ara[b]=1;
			}
			u=findpar(a);
			v=findpar(b);
			if(u!=v)
			{
				if(rnk[u]>rnk[v])
				{
					if(rnk[u]!=0&&rnk[v]!=0)
					{
						ar[v]=-1;
						res[u]+=res[v];
					}
					else
					{
						res[u]+=cst[b];
					}
					ar[u]=1;
					par[v]=u;
				}
				else if(rnk[v]>rnk[u])
				{
					if(rnk[u]!=0&&rnk[v]!=0)
					{
						ar[u]=-1;
						res[v]+=res[u];
					}
					else
					{
						res[v]+=cst[a];
					}
					ar[v]=1;
					par[u]=v;
				}
				else
				{
					if(rnk[u]==0&&rnk[v]==0)
					{
						res[u]=cst[a]+cst[b];
						ar[u]=1;
					}
					else
					{
						res[u]+=res[v];
						ar[v]=-1;
					}
				par[v]=u;
				rnk[u]++;
				}
			}
		}
		for(j=0;j<n;j++)
		{
			if(res[j]!=0&&ar[j]==1)
			{
				y=1;
				printf("IMPOSSIBLE\n");
				break;
			}
		}
		if(y==0)
		{
			printf("POSSIBLE\n");
		}
		for(j=0;j<=n;j++)
		{
			rnk[j]=ara[j]=cst[j]=par[j]=ar[j]=0;
		}
	}
	return 0;
}
