#include<cstdio>
#include<iostream>
#include<cmath>
#include<cstdlib>
#include<cctype>
#include<algorithm>
#include<vector>
#include<stack>
#include<string>
#include<deque>
#include<list>
#include<queue>
#include<cstring>
#include<map>
#define MAX(a,b) (a<b?b:a)
#define MIN(a,b) (a<b?a:b)
using namespace std;
vector<long>vc[1000];
queue<long>qu;
long visit[10000],cost[1000],p[10000],str[1000],ch2[1000];
char ch[100],ch1[100];
map<char,long>mp;
map<long,char>mp1,mp2;
void bfs(long node)
{
	char c;
	long i,u,v;
	qu.push(node);
	while(!qu.empty())
	{
		v=qu.front();
		visit[v]=1;
		for(i=0;i<vc[v].size();i++)
		{
			u=vc[v][i];
			if(!visit[u])
			{
				qu.push(u);
				p[u]=v;
			}
		}
		qu.pop();
	}
}
int main()
{
	long test,k,i,j,town,query,l,q;
	scanf("%ld",&test);
	for(i=0;i<test;i++)
	{
		if(i>0)
			printf("\n");
		k=1;
	    scanf("%ld%ld",&town,&query);
		for(j=0;j<town;j++)
		{
			scanf("%s%s",ch,ch1);
			if(mp[ch[0]]==0)
			{
				mp[ch[0]]=k;
				mp1[k]=ch[0];
				k++;
			}
			if(mp[ch1[0]]==0)
			{
				mp[ch1[0]]=k;
				mp1[k]=ch1[0];
				k++;
			}
			vc[mp[ch[0]]].push_back(mp[ch1[0]]);
			vc[mp[ch1[0]]].push_back(mp[ch[0]]);
		}
		for(j=0;j<query;j++)
		{
			l=0;
			scanf("%s%s",ch,ch1);
			cost[mp[ch[0]]]=0;
			bfs(mp[ch[0]]);
			mp2[0]=mp1[mp[ch1[0]]];
			while(1)
			{
				mp2[0]=mp1[p[mp[mp2[0]]]];
				if(mp2[0]==ch[0])
				{
					break;
				}
				else
				{
					str[l]=mp2[0];
					l++;
				}
			}
			printf("%c",ch[0]);
			for(q=l-1;q>=0;q--)
			{
				printf("%c",str[q]);
			}
			printf("%c\n",ch1[0]);
			for(q=0;q<=k;q++)
			{
				visit[q]=p[q]=0;
			}
			mp2.clear();
		}
		mp1.clear(),mp.clear();
		for(q=0;q<=k;q++)
		{
			vc[q].clear();
		}

	}
	return 0;
}
