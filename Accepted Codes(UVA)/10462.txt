#include<cstdio>
#include<iostream>
#include<cmath>
#include<cstdlib>
#include<cctype>
#include<algorithm>
#include<limits>
#include<vector>
#include<stack>
#include<string>
#include<deque>
#include<set>
#include<list>
#include<bitset>
#include<ctime>
#include<functional>
#include<numeric>
#include<cfloat>
#include<sstream>
#include<complex>
#include<queue>
#include<cstring>
#include<stdexcept>
#include<utility>
#include<map>
#include<fstream>
#include<iomanip>
#include<cassert>
#define MAX(a,b) (a<b?b:a)
#define MIN(a,b) (a<b?a:b)
#define inf (1<<30)-1
#define SIZE 100000001
#define pi 3.14159265358979323846
#define even(a) ((a)%2==0)
#define odd(a) ((a)%2==1)
const double E = 2.7182818284590452353602874713527;
using namespace std;
#define eps 1e-14
long par[210],rank[210],ar[210],a[210],b[210],ct[210],nd[210],cs[210],ro[210];
long u,v,k,cnt,nod,n,m,p,j,cost;
struct ss{
	long in,fn,cst;
}ara[10010];
bool cmp(ss aa,ss bb)
{
	return aa.cst<bb.cst;
}
void makepair(long n)
{
	par[n]=n;
}
long findpar(long r)
{
	if(par[r]==r) return r;
	else
		return par[r]=findpar(par[r]);
}
void link()
{
	            cost+=ara[j].cst;
				if(rank[u]==0&&rank[v]==0)
				{
					par[v]=u;
					rank[u]+=2;
					cnt++;
					nod+=2;
				}
				else if(rank[u]==rank[v])
				{
					par[v]=u;
					rank[u]+=rank[v];
					cnt--;
				}
				else if(rank[u]>rank[v])
				{
					par[v]=u;
					if(rank[v]==0)
					{
						nod++;
						rank[u]++;
					}
					else
					{
						rank[u]+=rank[v];
						cnt--;
					}
				}
				else if(rank[v]>rank[u])
				{
					par[u]=v;
					if(rank[u]==0) 
					{
						nod++;
						rank[v]++;
					}
					else
					{
						rank[v]+=rank[u];
						cnt--;
					}
				}
}
void clr()
{
	long i;
	for(i=0;i<=n;i++)
	{
		par[i]=rank[i]=0;
	}
}
void lpair()
{
	long i;
	for(i=0;i<=n;i++)
	{
		par[i]=i;
	}
}
int main()
{
	long test,e,i,l,y;
	scanf("%ld",&test);
	for(i=0;i<test;i++)
	{
		cnt=nod=k=p=cost=y=0;
		scanf("%ld%ld",&n,&e);
		if((n==1&&e==0))
			printf("Case #%ld : No second way\n",i+1);
		else if(n>1&&e==0)
		{
			printf("Case #%ld : No way\n",i+1);
		}
		else
		{
		for(j=0;j<e;j++)
		{
			scanf("%ld%ld%ld",&ara[j].in,&ara[j].fn,&ara[j].cst);
			/*if(ar[ara[j].in]==0)
			{
				makepair(ara[j].in);
				ar[ara[j].in]=1;
				nd[m]=ara[j].in;
				m++;
			}
			if(ar[ara[j].fn]==0)
			{
				makepair(ara[j].fn);
				ar[ara[j].fn]=1;
				nd[m]=ara[j].fn;
				m++;
			}*/
		}
		lpair();
		if(n==1)
			printf("Case #%ld : No second way\n",i+1);
		else
		{
		sort(ara,ara+e,cmp);
		for(j=0;j<e;j++)
		{
			u=findpar(ara[j].in);
			v=findpar(ara[j].fn);
			if(u!=v)
			{
				//a[k]=ara[j].in;
				//b[k]=ara[j].fn;
				//cs[k]=ara[j].cst;
				ro[k]=j;
				k++;
			    link();
			}
		}
			if(cnt==1&&nod==n)
			{
				//ct[p]=cost;
				//p++;
				for(l=0;l<k;l++)
				{
					cnt=nod=cost=0;
					clr();
					lpair();
					for(j=0;j<e;j++)
					{
						if(ro[l]!=j)
						//if((a[l]!=ara[j].in||b[l]!=ara[j].fn||cs[l]!=ara[j].cst))
						{
							u=findpar(ara[j].in);
							v=findpar(ara[j].fn);
							if(u!=v)
							{
								link();
							}
						}
					}
					if(cnt==1&&nod==n)
					{
						y=1;
						ct[p]=cost;
						p++;
					}
				}
				    sort(ct,ct+p);
					/*for(j=0;j<p-1;j++)
					{
						if(ct[j]!=ct[j+1])
						{
							y=1;
							printf("Case #%ld : %ld\n",i+1,ct[j+1]);
							break;
						}
					}*/
				if(y==0)
					printf("Case #%ld : No second way\n",i+1);
				else
					printf("Case #%ld : %ld\n",i+1,ct[0]);
			}
			else
			{
				printf("Case #%ld : No way\n",i+1);
			}
	
		}
		}
		for(j=0;j<=210;j++)
		{
			ar[j]=par[j]=nd[j]=rank[j]=ro[j]=ct[j]=0;
		}
	}
	return 0;
}
