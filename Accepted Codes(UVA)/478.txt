#include<cstdio>
#include<iostream>
#include<cmath>
#include<cstdlib>
#include<cctype>
#include<algorithm>
#include<limits>
#include<vector>
#include<stack>
#include<string>
#include<deque>
#include<set>
#include<list>
#include<bitset>
#include<ctime>
#include<functional>
#include<numeric>
#include<cfloat>
#include<sstream>
#include<complex>
#include<queue>
#include<cstring>
#include<stdexcept>
#include<utility>
#include<map>
#include<fstream>
#include<iomanip>
#include<cassert>
#define MAX(a,b) (a<b?b:a)
#define MIN(a,b) (a<b?a:b)
#define inf (1<<30)-1
#define SIZE 100000001
#define pi 3.14159265358979323846
#define even(a) ((a)%2==0)
#define odd(a) ((a)%2==1)
const double E = 2.7182818284590452353602874713527;
using namespace std;
#define eps 1e-14
struct ss{
	char c[10];
	double xa,ya,xb,yb,xc,yc,r;
}ara[100010];
int main()
{
	long i=0,j,k=0;
	double a,b,res1,rd,res2,res3,res,dis,y,rs;
	while(scanf("%s",ara[i].c)&&ara[i].c[0]!='*')
	{
		if(ara[i].c[0]=='r')
		{
			scanf("%lf%lf%lf%lf",&ara[i].xa,&ara[i].ya,&ara[i].xb,&ara[i].yb);
			ara[i].xa*=10,ara[i].ya*=10,ara[i].xb*=10,ara[i].yb*=10;
		}
		else if(ara[i].c[0]=='c')
		{
			scanf("%lf%lf%lf",&ara[i].xa,&ara[i].ya,&ara[i].r);
			ara[i].xa*=10,ara[i].ya*=10,ara[i].r*=10;
		}
		else if(ara[i].c[0]=='t')
		{
			scanf("%lf%lf%lf%lf%lf%lf",&ara[i].xa,&ara[i].ya,&ara[i].xb,&ara[i].yb,&ara[i].xc,&ara[i].yc);
			ara[i].xa*=10,ara[i].ya*=10,ara[i].xb*=10,ara[i].yb*=10,ara[i].xc*=10,ara[i].yc*=10;
		}
		i++;
	}
	while(1)
	{
		scanf("%lf%lf",&a,&b);
		a*=10,b*=10;
		if(a==99999&&b==99999)
			break;
		else
		{
		y=0;
		k++;
		for(j=0;j<i;j++)
		{
			if(ara[j].c[0]=='r')
			{
				if(a>ara[j].xa&&a<ara[j].xb&&b<ara[j].ya&&b>ara[j].yb)
				{
					y=1;
					printf("Point %ld is contained in figure %ld\n",k,j+1);
				}
			}
			else if(ara[j].c[0]=='c')
			{
				rd=ara[j].r*ara[j].r;
				dis=(((a-ara[j].xa)*(a-ara[j].xa))+((b-ara[j].ya)*(b-ara[j].ya)));
				if(dis<rd)
				{
					y=1;
					printf("Point %ld is contained in figure %ld\n",k,j+1);
				}
			}
			else
			{
				res=fabs(((ara[j].xa*ara[j].yc)+(ara[j].xc*ara[j].yb)+(ara[j].xb*ara[j].ya))-((ara[j].ya*ara[j].xc)+(ara[j].yc*ara[j].xb)+(ara[j].yb*ara[j].xa)));
			    res1=fabs(((a*ara[j].ya)+(ara[j].xa*ara[j].yc)+(ara[j].xc*b))-((b*ara[j].xa)+(ara[j].ya*ara[j].xc)+(ara[j].yc*a)));
				res2=fabs(((a*ara[j].yb)+(ara[j].xb*ara[j].ya)+(ara[j].xa*b))-((b*ara[j].xb)+(ara[j].yb*ara[j].xa)+(ara[j].ya*a)));
				res3=fabs(((a*ara[j].yc)+(ara[j].xc*ara[j].yb)+(ara[j].xb*b))-((b*ara[j].xc)+(ara[j].yc*ara[j].xb)+(ara[j].yb*a)));
				rs=res1+res2+res3;
				if(fabs(res-rs)<=.000001)
				{
					y=1;
					printf("Point %ld is contained in figure %ld\n",k,j+1);
				}
			}
		}
		if(y==0)
			printf("Point %ld is not contained in any figure\n",k);
		}
	}
	return 0;
}
