#include<cstdio>
#include<iostream>
#include<cmath>
#include<cstdlib>
#include<cctype>
#include<algorithm>
#include<limits>
#include<vector>
#include<stack>
#include<string>
#include<deque>
#include<list>
#include<bitset>
#include<ctime>
#include<functional>
#include<numeric>
#include<cfloat>
#include<sstream>
#include<complex>
#include<queue>
#include<cstring>
#include<stdexcept>
#include<set>
#include<utility>
#include<map>
#include<fstream>
#include<iomanip>
#include<cassert>
#define MAX(a,b) (a<b?b:a)
#define MIN(a,b) (a<b?a:b)
#define inf (1<<30)-1
#define SIZE 100000001
#define pi 3.14159265358979323846
#define even(a) ((a)%2==0)
#define odd(a) ((a)%2==1)
const double E = 2.7182818284590452353602874713527;
using namespace std;
const double eps = 1e-9;
char line[10000];
vector<long>vc[12000];
bool visit[1200];
long cnt,num[1200],low[1200],parent[1200],c,coun,a[1200],ar[1200];
void art(long node)
{
	long i,u;
	low[node]=num[node];
	for(i=0;i<vc[node].size();i++)
	{

		u=vc[node][i];
		if(num[u]>num[node])
		{
			art(u);
			if(low[u]>=num[node])
			{
				if((low[u]==num[node])&&a[node]==0)
				{
					if(ar[u]<1)
					{
					coun++;
					a[node]=1;
					}
				}
				else if(a[node]==0)
				{
					coun++;
					a[node]=1;
				}
			}
			low[node]=MIN(low[node],low[u]);
		}
		else if(parent[node]!=u)
		{
			low[node]=MIN(low[node],num[u]);
			ar[node]++;
		}
	}
}
void dfs(long node,long source)
{
	long i,u;
	num[node]=++cnt;
	visit[node]=1;
	for(i=0;i<vc[node].size();i++)
	{
		u=vc[node][i];
		if(!visit[u])
		{
			if(node==source)
			{
				c++;
			}
			parent[u]=node;
			dfs(u,source);
		}
	}
}
int main()
{
	char *pch;
	long numb,n,y,u,i,r;
	while(scanf("%ld",&n)&&n)
	{
		y=r=c=coun=cnt=0;
		getchar();
		while(gets(line))
		{
			if(strcmp(line,"0")==0)
				break;
			else
			{
			if(strlen(line)!=0)
			{
			pch=strtok(line," ");
			sscanf(pch,"%ld",&u);
			while (pch != NULL)
			{
              pch = strtok (NULL, " ");
			  if(pch==NULL)
				  break;
			  sscanf(pch,"%ld",&numb);
			  vc[u].push_back(numb);
			  vc[numb].push_back(u);

			}
			}
			}
		}

				c=cnt=0;
		      dfs(1,1);
		      art(1);
			        if(c==1&&a[1]==1)
					{
						r++;
					}
			printf("%ld\n",coun-r);
			for(i=0;i<=120;i++)
			{
				vc[i].clear();
				visit[i]=a[i]=0;
				low[i]=ar[i]=0;
				num[i]=0;
				parent[i]=0;
			}
	}
	return 0;
}
/*
4
1 2 3
2 3 4
3 4 1
0
*/
#include<cstdio>
#include<iostream>
#include<cmath>
#include<cstdlib>
#include<cctype>
#include<algorithm>
#include<limits>
#include<vector>
#include<stack>
#include<string>
#include<deque>
#include<set>
#include<list>
#include<bitset>
#include<ctime>
#include<functional>
#include<numeric>
#include<cfloat>
#include<sstream>
#include<complex>
#include<queue>
#include<cstring>
#include<stdexcept>
#include<utility>
#include<map>
#include<fstream>
#include<iomanip>
#include<cassert>
#define MAX(a,b) (a<b?b:a)
#define MIN(a,b) (a<b?a:b)
#define inf (1<<30)-1
#define SIZE 100000001
#define pi 3.14159265358979323846
#define even(a) ((a)%2==0)
#define odd(a) ((a)%2==1)
const double E = 2.7182818284590452353602874713527;
using namespace std;
const double eps = 1e-9;
char line[10000];
vector<long>vc[10000];
long color[100000],low[100000],d[100000],m,prn[100000],t,cnt,a[100000];
void art(long v)
{
	long i,w;
	color[v]=1;
	low[v]=d[v]=++m;
	for(i=0;i<vc[v].size();i++)
	{
		w=vc[v][i];
		if(color[w]==0)
		{
			if(v==1)
			{
				t++;
			}
			prn[w]=v;
			art(w);
			if(prn[v]==NULL)
			{
				if(t>1&&a[v]==0)
				{
					a[v]=1;
					cnt++;
				}
			}
			else if((low[w]>=d[v])&&a[v]==0)
			{
				a[v]=1;
				cnt++;
			}
			low[v]=MIN(low[w],low[v]);
		}
		else if(w!=prn[v])
		{
			low[v]=MIN(low[v],d[w]);
		}
	}
	color[v]=2;
}
int main()
{
	long n,u,num,i;
	while(scanf("%ld",&n)&&n)
	{
		getchar();
		while(gets(line)&&(strcmp(line,"0")!=0))
		{
			stringstream ss(line);
			ss>>num;
			u=num;
			while(ss>>num)
			{
				vc[u].push_back(num);
				vc[num].push_back(u);
			}

		}
		cnt=t=m=0;
		art(1);
		printf("%ld\n",cnt);
		for(i=0;i<=n;i++)
		{
			vc[i].clear();
			a[i]=prn[i]=d[i]=low[i]=color[i]=0;
		}
	}
	return 0;
}
/*
7
1 2
2 3
3 4
3 7
4 5
4 1
5 6
6 4
*/
