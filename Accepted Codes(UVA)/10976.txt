#include<cstdio>
#include<iostream>
#include<cmath>
#include<cstdlib>
#include<cctype>
#include<algorithm>
#include<limits>
#include<vector>
#include<stack>
#include<string>
#include<deque>
#include<set>
#include<list>
#include<bitset>
#include<ctime>
#include<functional>
#include<numeric>
#include<cfloat>
#include<sstream>
#include<complex>
#include<queue>
#include<cstring>
#include<stdexcept>
#include<utility>
#include<map>
#include<fstream>
#include<iomanip>
#include<cassert>
#define srt(v) srt(v.begin(),v.end())
#define area(x1,y1,x2,y2,x3,y3) ( x1*(y2-y3) + x2*(y3-y1) + x3*(y1-y2) )
#define distSqr(x1,y1,x2,y2) ( sqr(x1-x2) + sqr(y1-y2) )
#define pi acos(-1.0)
#define MAX(a,b) (a<b?b:a)
#define MIN(a,b) (a<b?a:b)
#define inf (1<<30)-1
#define SIZE 100000001
#define even(a) ((a)%2==0)
#define odd(a) ((a)%2==1)
const double E = 2.7182818284590452353602874713527;
using namespace std;
#define eps 1e-9
#define pf printf
#define sf scanf
#define ll long long
long x[1000010], y[1000010];
long GCD(long a,long b)
{
	while(b) b ^= a ^= b ^= a %= b;
	return a;
}
long LCM(long a, long b)
{
    return (a * b) / GCD(a, b);
}
int main()
{
    long cnt = 0, num, lcm, mod, numerator, first_denominator, second_denominator, i, multiplier, repeat_value, prev_second_denominator;
    while(sf("%ld", &num) != EOF)
    {
        prev_second_denominator = -1;
        cnt = 0;
        first_denominator = num + 1;
        while(1)
        {
            lcm = LCM(num, first_denominator);
            numerator = (lcm / num) - (lcm / first_denominator);
            second_denominator = lcm / numerator;
            mod = lcm % numerator;
            if(!mod)
            {
                if(first_denominator == prev_second_denominator) break;
                x[cnt] = first_denominator;
                y[cnt] = second_denominator;
                cnt++;
                prev_second_denominator = second_denominator;
                if(first_denominator == second_denominator) break;
            }
            first_denominator++;
        }
        pf("%ld\n", cnt);
        for(i = 0 ; i < cnt ; i++)
        {
            pf("1/%ld = 1/%ld + 1/%ld\n", num, y[i], x[i]);
        }
    }
	return 0;
}

