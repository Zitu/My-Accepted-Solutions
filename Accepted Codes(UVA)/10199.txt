#include<cstdio>
#include<iostream>
#include<cmath>
#include<cstdlib>
#include<cctype>
#include<algorithm>
#include<limits>
#include<vector>
#include<stack>
#include<string>
#include<deque>
#include<set>
#include<list>
#include<bitset>
#include<ctime>
#include<functional>
#include<numeric>
#include<cfloat>
#include<sstream>
#include<complex>
#include<queue>
#include<cstring>
#include<stdexcept>
#include<utility>
#include<map>
#include<fstream>
#include<iomanip>
#include<cassert>
#define MAX(a,b) (a<b?b:a)
#define MIN(a,b) (a<b?a:b)
#define inf (1<<30)-1
#define SIZE 100000001
#define pi 3.14159265358979323846
#define enodeen(a) ((a)%2==0)
#define odd(a) ((a)%2==1)
const double E = 2.7182818284590452353602874713527;
using namespace std;
const double eps = 1e-9;
char ch[100],ch1[100];
vector<long>vc[10000];
map<string,long>mp;
map<long,string>mp1;
long color[110],d[110],low[110],prn[110],a[110],cnt,m,t,len;
char str[110][50];
string st;
struct ss{
	char s[50];
}sr[110];
bool cmp(ss a,ss b)
{
	return (strcmp(a.s,b.s)<=0);
}
void artp(long node,long source)
{
	long i,w;
	color[node]=1;
	low[node]=d[node]=++m;
	for(i=0;i<vc[node].size();i++)
	{
		w=vc[node][i];
		if(color[w]==0)
		{
			if(node==source)
			{
				t++;
			}
			prn[w]=node;
			artp(w,source);
			if(prn[node]==NULL)
			{
				if(t>1&&a[node]==0)
				{
					a[node]=1;
					st=mp1[node];
					len=st.length();
					st.copy(sr[cnt].s,len,0);
					sr[cnt].s[len]=NULL;
					cnt++;
				}
			}
			else if(low[w]>=d[node]&&a[node]==0)
			{
				    a[node]=1;
					st=mp1[node];
					len=st.length();
					st.copy(sr[cnt].s,len,0);
					sr[cnt].s[len]=NULL;
					cnt++;
			}
			low[node]=MIN(low[node],low[w]);
		}
		else if(w!=prn[node])
		{
			low[node]=MIN(low[node],d[w]);
		}
	}
}
int main()
{
	long num,k,i,rout,cse=0;
	while(scanf("%ld",&num)&&num)
	{
		if(cse>0)
			printf("\n");
		cse++;
		k=1;
		for(i=0;i<num;i++)
		{
		  scanf("%s",ch);
		 if(mp[ch]==0)
		 {
			mp[ch]=k;
			mp1[k]=ch;
			k++;
		 }
		}
		scanf("%ld",&rout);
		for(i=0;i<rout;i++)
		{
			scanf("%s%s",ch,ch1);
			vc[mp[ch]].push_back(mp[ch1]);
			vc[mp[ch1]].push_back(mp[ch]);
		}
		cnt=t=m=0;
		for(i=1;i<=num;i++)
		{
			t=m=0;
			if(!color[i])
			{
				artp(i,i);
			}
			memset(d,0,sizeof(d));
			memset(low,0,sizeof(low));
			memset(prn,0,sizeof(prn));
			memset(a,0,sizeof(a));
		}
		sort(sr,sr+cnt,cmp);
		printf("City map #%ld: %ld camera(s) found\n",cse,cnt);
		for(i=0;i<cnt;i++)
		{
			printf("%s\n",sr[i].s);
		}
		for(i=0;i<=num;i++)
		{
			vc[i].clear();
			color[i]=low[i]=prn[i]=d[i]=a[i]=0;
		}
		mp.clear();
		mp1.clear();
	}
	return 0;
}
